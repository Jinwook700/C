/*What I have to do is ....

- use cmd to explain "copy con aaa.txt"
- copy "exe" to the default dir of the cmd!!
- del , ren ...
- explain argc argv ..
- how to make files
[File I/O Example]*/
#include <stdlib.h>

#include <stdio.h>

#include <fcntl.h>

#include <unistd.h>



int main()

{

    char filename[] = "file_output.txt";

    char text[] = "What a lovely little file\n";

    int fdes,r;



    /* open the file for writing and creating */

    fdes = open(filename,O_WRONLY|O_CREAT);

    if( fdes==-1 )

    {

        fprintf(stderr,"Unable to create %s\n",filename);

        return(1);

    }

    printf("fdes = %d\n", fdes);

    /* write the buffer */

    r = write( fdes, text, sizeof(text)-1 );

    if( r != sizeof(text)-1 )

    {

        fprintf(stderr,"Some kind of file writing error\n");

    }

    /* confirm success */

    printf("Data written to %s\n",filename);



    /* close 'er up */

    close(fdes);



    return(0);

}

/*[Pointer Array / Array Pointer] =======================================================================



#include <stdio.h>

#include <stdlib.h>

#define INT 0

#define DOUBLE 1



void printDec(int i) {

    printf("Decimal: %5d\n", i);

}



void printOct(int i) {

    printf("Octet: %5o\n", i);

}



void genericPrint(int type, char *name, void *p) {

    printf("%s = ", name);

    switch(type) {

        case INT:

            printf("%d\n", *(int *)p);

            break;

        case DOUBLE:

            printf("%f\n", *(double *)p);

            break;

        default:

            printf(".... unknown type !!\n");

            break;

    }

}



int main()

{

    // Let's implement our own print with void *

    int i = 191000;

    double f = 3.14;



    genericPrint(INT, "i", &i);

    genericPrint(DOUBLE, "f", &f);



    void (*fp)(int);   // Declare function pointer: return type void, one parameter: int

    fp = printDec;

    fp(i);

    fp = printOct;

    fp(i);



    const char* arr[3];

    arr[0] = "ABC";

    arr[1] = "DEF";

    arr[2] = "GHI";



    printf("arr[0] = %s\n", arr[0]);

    printf("arr[0]'s value = %p\n", arr[0]);

    printf("arr[0]'s address = %p\n", &arr[0]);

    printf("arr[1] = %s\n", arr[1]);

    printf("arr[1]'s value = %p\n", arr[1]);

    printf("arr[1]'s address = %p\n", &arr[1]);

    printf("i's address = %p\n", &i);



    char (*arr2)[3];



    char tmp1[3] = {'a', 'b', 'c'};

    char tmp2[3] = {'d', 'e', 'f'};

    char tmp3[3] = {'g', 'h', 'i'};



    arr2 = &tmp1;

    for (int i = 0; i < sizeof(*arr2); i++) {

        printf("%c", (*arr2)[i]);

    }

    printf("\n");

    arr2 = &tmp2;

    for (int i = 0; i < sizeof(*arr2); i++) {

        printf("%c", (*arr2)[i]);

    }

    printf("&tmp1 = %p\n", &tmp1);

    printf("tmp1[0]'s address = %p\n", &tmp1[0]);

    printf("\n");

    return 0;

}*/

/*[Ascii to Interger Conversion: atoi()] ========================================================

#include <stdio.h>

#define MAXLINE 1000

int atoi(char s[]);

int getline(char s[],int lim);

void main()

{

char line[MAXLINE];

int  num;

printf("Type your input: ");

while (getline(line, MAXLINE) > 0) {

printf("Input string: %s\n", line);

num = atoi(line);

printf("Converted number: %d\n", num);

printf("Type your input: ");

}

}

int atoi(char s[])

{

int i, n;

n = 0;

  for (i = 0; s[i] >= ‘0' && s[i] <= ‘9'; ++i)

      n = 10 * n + (s[i] - ‘0');

  return n;

}

int getline(char s[],int lim)

{

  int c, i;

  for (i=0; i < lim-1 && (c=getchar())!=EOF &&  

           c!='\n'; ++i)

  s[i] = c;

  if (c == '\n') {

  s[i] = c;

  ++i;

  }

  s[i] = '\0';

  return i;

}*/

/*[Upper case to lower case Conversion: lower()] ============================================

#include <stdio.h>

#define MAXLINE 1000

int lower(int c);

int newgetline(char s[],int lim);

void main()

{

char line[MAXLINE];

printf("Type your string: ");

while (newgetline(line, MAXLINE) > 0) {

printf("Converted string: %s\n", line);

printf("Type your string: ");

       }

}

int lower(int c)

{

if (c >= 'A' && c <= 'Z')

  return c + 'a' - 'A';

else

  return c;

}

int newgetline(char s[],int lim)

{

int c, i;

int newc;

for (i=0; i < lim-1 && (c=getchar())!=EOF &&

       c!='\n'; ++i) {

newc = lower(c);

s[i] = newc;

}

if (c == '\n') {

s[i] = c;

++i;

}

s[i] = '\0';

return i;

}*/

